
plugins {
    id 'java-library'
    id 'eclipse'
    id 'maven-publish'
}

repositories {
    mavenLocal()
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}

dependencies {
	api('com.google.guava:guava:31.1-jre') {
		exclude module: 'error_prone_annotations'
	}
	api('org.slf4j:slf4j-api:2.0.7') {
	}
    api('io.trino:trino-plugin-toolkit:419') {
		exclude module: 'units'
		exclude module: 'guava'
		exclude module: 'guice'
		exclude module: 'jol-core'
		exclude module: 'jackson-annotations'
		exclude module: 'jackson-core'
		exclude module: 'jackson-databind'
		exclude module: 'jackson-datatype-jsr310'
		exclude module: 'error_prone_annotations'
		exclude module: 'slf4j-api'
		exclude module: 'units'
		exclude module: 'jackson-datatype-jdk8'
		exclude module: 'jol-core'
	}
	api('com.google.errorprone:error_prone_annotations:2.19.1') {
	}
    api('io.airlift:units:1.8') {
    }
    api('org.jetbrains:annotations:17.0.0') {
    }
	api('jakarta.annotation:jakarta.annotation-api:2.0.0') {
	}
    api('io.airlift:bootstrap:231') {
		exclude module: 'guava'
		exclude module: 'guice'
		exclude module: 'jackson-annotations'
		exclude module: 'jackson-core'
		exclude module: 'jackson-databind'
		exclude module: 'jackson-datatype-jsr310'
		exclude module: 'slf4j-api'
		exclude module: 'units'
	}
    api('io.airlift:configuration:231') {
		exclude module: 'guava'
		exclude module: 'guice'
	}
    api('io.airlift:http-client:231') {
		exclude module: 'guava'
		exclude module: 'guice'
		exclude module: 'jol-core'
		exclude module: 'jackson-annotations'
		exclude module: 'jackson-core'
		exclude module: 'jackson-databind'
		exclude module: 'jackson-datatype-jsr310'
		exclude module: 'slf4j-api'
		exclude module: 'units'
		exclude module: 'jackson-datatype-jdk8'
		exclude module: 'jol-core'
	}
    api('io.airlift:json:231') {
		exclude module: 'guava'
		exclude module: 'guice'
		exclude module: 'jackson-annotations'
		exclude module: 'jackson-core'
		exclude module: 'jackson-databind'
		exclude module: 'jackson-datatype-jsr310'
	}
    api 'io.airlift:log:231'
	
    //api 'io.airlift:units:1.8'
	
    api('com.fasterxml.jackson.core:jackson-core:2.15.1') {
		exclude module: 'guava'
	}
    api('com.fasterxml.jackson.core:jackson-databind:2.15.1') {
		exclude module: 'guava'
	}
    api('com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.15.1') {
		exclude module: 'guava'
		exclude module: 'jackson-annotations'
		exclude module: 'jackson-core'
	}
    api 'com.google.code.findbugs:jsr305:3.0.2'
    //api 'com.google.guava:guava:31.1-jre'
	
    api('com.google.inject:guice:6.0.0') {
		exclude module: 'guava'
	}

    api('com.squareup.okhttp3:okhttp:4.11.0') {
		exclude module: 'annotations'
	}
    api 'javax.annotation:javax.annotation-api:1.3.2'
    api 'javax.validation:validation-api:2.0.1.Final'
    runtimeOnly('io.airlift:log-manager:231') {
		exclude module: 'jackson-annotations'
		exclude module: 'jackson-core'
		exclude module: 'jackson-databind'
		exclude module: 'jackson-datatype-jsr310'
		exclude module: 'guava'
		exclude module: 'slf4j-api'
		exclude module: 'units'
	}
    runtimeOnly('io.airlift:node:231') {
		exclude module: 'guava'
	}
    testImplementation('io.trino:trino-main:419') {
		exclude module: 'guava'
		exclude module: 'slf4j-api'
		exclude module: 'error_prone_annotations'
		exclude module: 'bootstrap'
		exclude module: 'configuration'
		exclude module: 'http-client'
		exclude module: 'json'
		exclude module: 'log-manager'
		exclude module: 'log'
		exclude module: 'jackson-core'
		exclude module: 'jackson-databind'
		exclude module: 'jackson-datatype-jsr310'
		exclude module: 'guice'
		exclude module: 'http-server'
		exclude module: 'slice'
		exclude module: 'jmxutils'
		exclude module: 'concurrent'
		exclude module: 'node'
		exclude module: 'trace-token'
		exclude module: 'jackson-annotations'
		exclude module: 'kotlin-stdlib-jdk8'
		exclude module: 'units'
		exclude module: 'discovery-server'
		exclude module: 'nimbus-jose-jwt'
		exclude module: 'fastutil'
		exclude module: 'asm-util'
		exclude module: 'asm-tree'
		exclude module: 'asm'
		exclude module: 'jackson-datatype-jdk8'
		exclude module: 'jna-platform'
		exclude module: 'jna'
		exclude module: 'annotations'
		exclude module: 'jol-core'
		exclude module: 'jakarta.annotation-api'
	}
    testImplementation('io.trino:trino-testing:419') {
		exclude module: 'guava'
		exclude module: 'slf4j-api'
		exclude module: 'error_prone_annotations'
		exclude module: 'bootstrap'
		exclude module: 'configuration'
		exclude module: 'http-client'
		exclude module: 'json'
		exclude module: 'log-manager'
		exclude module: 'log'
		exclude module: 'jackson-core'
		exclude module: 'jackson-databind'
		exclude module: 'jackson-datatype-jsr310'
		exclude module: 'guice'
		exclude module: 'http-server'
		exclude module: 'slice'
		exclude module: 'jmxutils'
		exclude module: 'byte-buddy'
		exclude module: 'concurrent'
		exclude module: 'node'
		exclude module: 'trace-token'
		exclude module: 'jackson-annotations'
		exclude module: 'kotlin-stdlib-jdk8'
		exclude module: 'units'
		exclude module: 'discovery-server'
		exclude module: 'nimbus-jose-jwt'
		exclude module: 'fastutil'
		exclude module: 'commons-math3'
		exclude module: 'asm-util'
		exclude module: 'asm-tree'
		exclude module: 'asm'
		exclude module: 'jackson-datatype-jdk8'
		exclude module: 'jna-platform'
		exclude module: 'jna'
		exclude module: 'annotations'
		exclude module: 'jol-core'
		exclude module: 'jakarta.annotation-api'
	}
    testImplementation('io.trino:trino-testing-services:419') {
		exclude module: 'guava'
		exclude module: 'units'
		exclude module: 'commons-math3'
		exclude module: 'asm-util'
	}
    testImplementation('io.airlift:http-server:231') {
		exclude module: 'guava'
		exclude module: 'slf4j-api'
		exclude module: 'jackson-core'
		exclude module: 'jackson-databind'
		exclude module: 'jackson-datatype-jsr310'
		exclude module: 'jackson-annotations'
		exclude module: 'units'
		exclude module: 'jackson-datatype-jdk8'
		exclude module: 'jol-core'
	}
    testImplementation('io.airlift:testing:231') {
		exclude module: 'error_prone_annotations'
	}
    testImplementation('org.apache.httpcomponents:httpclient:4.5.13') {
		exclude module: 'commons-codec'
	}
    testImplementation 'org.apache.httpcomponents:httpcore:4.4.13'
    testImplementation('org.assertj:assertj-core:3.24.2') {
		exclude module: 'byte-buddy'
	}
    testImplementation('org.eclipse.jetty.toolchain:jetty-servlet-api:4.0.6') {
		exclude module: 'slf4j-api'
	}    
	testImplementation('org.testcontainers:testcontainers:1.18.0') {
		exclude module: 'slf4j-api'
		exclude module: 'jackson-annotations'
		exclude module: 'jna-platform'
		exclude module: 'jna'
	}
    testImplementation 'org.testng:testng:6.10'
    compileOnly('io.trino:trino-spi:419') {
		exclude module: 'jol-core'
	}
    compileOnly('io.airlift:slice:0.45') {
		exclude module: 'jol-core'
	}
    compileOnly('com.fasterxml.jackson.core:jackson-annotations:2.15.1') {
		exclude module: 'guava'
	}
    compileOnly 'io.opentelemetry:opentelemetry-api:1.26.0'
    compileOnly 'io.opentelemetry:opentelemetry-context:1.26.0'
    compileOnly 'org.openjdk.jol:jol-core:0.17'
}

group = 'com.macdservices.trino.plugins'
version = '419'
description = 'new-trino-prometheus-plugin'
sourceCompatibility = 17
targetCompatibility = 17

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
}

tasks.named('test') {
    useTestNG()
}

task checkDependencies() {
	doLast {
		 configurations.runtimeClasspath.each { file ->
		if ( file.toString().contains('build') == false) {
			//println "TRACER checking: " + file.name
			assert file.exists()
			//TODO echo -e '\e[1A\e[K'
			}
		}
	}
}

configurations.all {
 resolutionStrategy {
   //force "groupId:artifactId:Version"
   failOnVersionConflict()
 }
}
